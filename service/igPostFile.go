package service

import (
	"context"
	"fmt"

	config "github.com/davidyap2002/user-go/config"
	model "github.com/davidyap2002/user-go/graph/model"
	tools "github.com/davidyap2002/user-go/tools"
)

//Generated By github.com/david-yappeter/GormCrudGenerator

//IgPostFileCreate Create
func IgPostFileCreate(ctx context.Context, input model.NewIgPostFile) (*model.IgPostFile, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	igPostFile := model.IgPostFile{
		FileID: input.FileID,
		PostID: input.PostID,
	}

	err := db.Table("ig_post_file").Create(&igPostFile).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &igPostFile, nil
}

//IgPostFileCreateBatch Create Batch
func IgPostFileCreateBatch(ctx context.Context, input []*model.NewIgPostFile) ([]*model.IgPostFile, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var igPostFileBatch []*model.IgPostFile

	for _, val := range input {
		igPostFile := model.IgPostFile{
			FileID: val.FileID,
			PostID: val.PostID,
		}

		igPostFileBatch = append(igPostFileBatch, &igPostFile)
	}

	err := db.Table("ig_post_file").Create(&igPostFileBatch).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return igPostFileBatch, nil
}

// //IgPostFileUpdate Update
// func IgPostFileUpdate(ctx context.Context, input model.UpdateIgPostFile) (*model.IgPostFile, error) {
// 	db := config.ConnectGorm()
// 	sqlDB, _ := db.DB()
// 	defer sqlDB.Close()

// 	igPostFile := model.IgPostFile{
// 		FileID: input.FileID,
// 		ID:     input.ID,
// 		PostID: input.PostID,
// 	}

// 	err := db.Table("ig_post_file").Where("id = ?", input.ID).Updates(map[string]interface{}{

// 		"file_id": input.FileID,
// 		"id":      input.ID,
// 		"post_id": input.PostID,
// 	}).Error

// 	if err != nil {
// 		fmt.Println(err)
// 		return nil, err
// 	}

// 	return &igPostFile, nil
// }

//IgPostFileDelete Delete
func IgPostFileDelete(ctx context.Context, id int) (string, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	err := db.Table("ig_post_file").Where("id = ?", id).Delete(&model.IgPostFile{}).Error

	if err != nil {
		fmt.Println(err)
		return "Fail", err
	}

	return "Success", nil
}

//IgPostFileGetByID Get By ID
func IgPostFileGetByID(ctx context.Context, id int) (*model.IgPostFile, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var igPostFile model.IgPostFile

	err := db.Table("ig_post_file").Where("id = ?", id).First(&igPostFile).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &igPostFile, nil
}

//IgPostFileGetAll GetAll
func IgPostFileGetAll(ctx context.Context) ([]*model.IgPostFile, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var igPostFile []*model.IgPostFile

	err := db.Table("ig_post_file").Find(&igPostFile).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return igPostFile, nil
}

//IgPostFilePagination Pagination
func IgPostFilePagination(ctx context.Context, limit *int, page *int, ascending *bool, sortBy *string, scopes *bool) ([]*model.IgPostFile, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var igPostFile []*model.IgPostFile

	query := db.Table("ig_post_file")

	tools.QueryMaker(query, limit, page, ascending, sortBy, scopes)
	err := query.Find(&igPostFile).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return igPostFile, nil
}

//IgPostFileTotalDataPagination  Total Data Pagination
func IgPostFileTotalDataPagination(ctx context.Context, limit *int, page *int, ascending *bool, sortBy *string, scopes *bool) (int, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var count int64

	query := db.Table("ig_post_file")

	tools.QueryMaker(query, limit, page, ascending, sortBy, scopes)
	err := query.Count(&count).Error

	if err != nil {
		fmt.Println(err)
		return 0, err
	}

	return int(count), nil
}
