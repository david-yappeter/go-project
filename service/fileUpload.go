package service

import (
	"context"
	"fmt"

	config "github.com/davidyap2002/user-go/config"
	model "github.com/davidyap2002/user-go/graph/model"
	tools "github.com/davidyap2002/user-go/tools"
)

//Generated By github.com/davidyap2002/GormCrudGenerator

//FileUploadCreate Create
func FileUploadCreate(ctx context.Context, input model.NewFileUpload) (*model.FileUpload, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	timeNow := tools.TimeUTC()

	fileUpload := model.FileUpload{
		CreatedAt: timeNow,
		FileID:    input.FileID,
		UserID:    input.UserID,
	}

	err := db.Table("file_upload").Create(&fileUpload).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &fileUpload, nil
}

//FileUploadCreateBatch Create Batch
func FileUploadCreateBatch(ctx context.Context, input []*model.NewFileUpload) ([]*model.FileUpload, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var fileUploadBatch []*model.FileUpload

	timeNow := tools.TimeUTC()

	for _, val := range input {
		fileUpload := model.FileUpload{
			CreatedAt: timeNow,
			FileID:    val.FileID,
			UserID:    val.UserID,
		}

		fileUploadBatch = append(fileUploadBatch, &fileUpload)
	}

	err := db.Table("file_upload").Create(&fileUploadBatch).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return fileUploadBatch, nil
}

//FileUploadUpdate Update
func FileUploadUpdate(ctx context.Context, input model.UpdateFileUpload) (*model.FileUpload, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	timeNow := tools.TimeUTC()

	fileUpload := model.FileUpload{
		FileID:    input.FileID,
		ID:        input.ID,
		UpdatedAt: &timeNow,
		UserID:    input.UserID,
	}

	err := db.Table("file_upload").Where("id = ?", input.ID).Updates(map[string]interface{}{
		"file_id":    input.FileID,
		"id":         input.ID,
		"updated_at": &timeNow,
		"user_id":    input.UserID,
	}).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &fileUpload, nil
}

//FileUploadSoftDelete Delete
func FileUploadSoftDelete(ctx context.Context, id int) (string, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	timeNow := tools.TimeUTC()

	err := db.Table("file_upload").Where("id = ?", id).Update("deleted_at", timeNow).Error

	if err != nil {
		fmt.Println(err)
		return "Fail", err
	}

	return "Success", nil
}

//FileUploadRestoreDelete Delete
func FileUploadRestoreDelete(ctx context.Context, id int) (string, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	err := db.Table("file_upload").Where("id = ?", id).Update("deleted_at", nil).Error

	if err != nil {
		fmt.Println(err)
		return "Fail", err
	}

	return "Success", nil
}

//FileUploadHardDelete Delete
func FileUploadHardDelete(ctx context.Context, id int) (string, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	err := db.Table("file_upload").Where("id = ?", id).Delete(&model.FileUpload{}).Error

	if err != nil {
		fmt.Println(err)
		return "Fail", err
	}

	return "Success", nil
}

//FileUploadGetByID Get By ID
func FileUploadGetByID(ctx context.Context, id int, scopes *bool) (*model.FileUpload, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var fileUpload model.FileUpload

	query := db.Table("file_upload")

	tools.DeletedAt(query, scopes)

	err := query.Where("id = ?", id).First(&fileUpload).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &fileUpload, nil
}

//FileUploadGetAll GetAll
func FileUploadGetAll(ctx context.Context, scopes *bool) ([]*model.FileUpload, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var fileUpload []*model.FileUpload

	query := db.Table("file_upload")

	tools.DeletedAt(query, scopes)

	err := query.Find(&fileUpload).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return fileUpload, nil
}

//FileUploadPagination Pagination
func FileUploadPagination(ctx context.Context, limit *int, page *int, ascending *bool, sortBy *string, scopes *bool, userID *int) ([]*model.FileUpload, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var fileUpload []*model.FileUpload

	query := db.Table("file_upload")

	tools.QueryMaker(query, limit, page, ascending, sortBy, scopes)

	tools.DeletedAt(query, scopes)

	tools.FilterByUserID(query, userID)

	err := query.Find(&fileUpload).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return fileUpload, nil
}

//FileUploadTotalDataPagination  Total Data Pagination
func FileUploadTotalDataPagination(ctx context.Context, limit *int, page *int, ascending *bool, sortBy *string, scopes *bool, userID *int) (int, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var count int64

	query := db.Table("file_upload")

	tools.QueryMaker(query, limit, page, ascending, sortBy, scopes)

	tools.DeletedAt(query, scopes)

	tools.FilterByUserID(query, userID)

	err := query.Count(&count).Error

	if err != nil {
		fmt.Println(err)
		return 0, err
	}

	return int(count), nil
}

//FileUploadGetByArrayUserID Dataloader
func FileUploadGetByArrayUserID(ctx context.Context, userID []int, scopes *bool) ([]*model.FileUpload, error) {
	db := config.ConnectGorm()
	sqlDB, _ := db.DB()
	defer sqlDB.Close()

	var fileUploadModels []*model.FileUpload

	query := db.Table("file_upload")

	tools.DeletedAt(query, scopes)

	err := query.Where("user_id IN (?)", userID).Find(&fileUploadModels).Error

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return fileUploadModels, nil
}
